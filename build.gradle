plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.2'
    id "com.epages.restdocs-api-spec" version "0.19.2"
}

group = 'com.ranchat'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
    configureEach {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // rdb
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // queryDsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:spring-mock-mvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // validator
    implementation 'commons-validator:commons-validator:1.7'

    // spring IO
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-SNAPSHOT")
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    // firebase
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // logstash-logback-encoder
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // logback-access (tomcat access log)
    implementation 'ch.qos.logback:logback-access:1.2.1'
}

test {
    useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

openapi3 {
    def outputPath = 'src/main/resources/static/api-docs/ranchat'
    mkdir(outputPath)

    servers = [{ url = "https://dev-api.ranchat.net"}, { url = "localhost:8080"}]
    title = "Ranchat API"
    description = "Ranchat API 문서"
    version = "1.0.0"
    format = 'json'

    // /static/docs/open-api-3.0.1.json 생성 → jar 파일만 배포할 예정이기에 build 에 출력
    outputDirectory = outputPath
    outputFileNamePrefix = 'main'
}